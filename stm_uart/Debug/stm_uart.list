
stm_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003848  08003848  00004848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b8  080038b8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038b8  080038b8  000048b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c0  080038c0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c0  080038c0  000048c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  080038d4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080038d4  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5d3  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa9  00000000  00000000  0001160f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  000130b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000798  00000000  00000000  00013a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d06  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb29  00000000  00000000  0003cf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbbe2  00000000  00000000  00049a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  00145684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00147e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003830 	.word	0x08003830

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003830 	.word	0x08003830

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fa82 	bl	8000a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f821 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f8fd 	bl	8000734 <MX_GPIO_Init>
  MX_UART4_Init();
 800053a:	f000 f8af 	bl	800069c <MX_UART4_Init>
  MX_LPUART1_UART_Init();
 800053e:	f000 f861 	bl	8000604 <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t pData = 'a';
 8000542:	2361      	movs	r3, #97	@ 0x61
 8000544:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(2000);
 8000546:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800054a:	f000 fae9 	bl	8000b20 <HAL_Delay>
	  HAL_UART_Transmit(&huart4, &pData, 1, HAL_MAX_DELAY);
 800054e:	1df9      	adds	r1, r7, #7
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
 8000554:	2201      	movs	r2, #1
 8000556:	4806      	ldr	r0, [pc, #24]	@ (8000570 <main+0x48>)
 8000558:	f002 fa92 	bl	8002a80 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, &pData, 1, HAL_MAX_DELAY);
 800055c:	1df9      	adds	r1, r7, #7
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	2201      	movs	r2, #1
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <main+0x4c>)
 8000566:	f002 fa8b 	bl	8002a80 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 800056a:	bf00      	nop
 800056c:	e7eb      	b.n	8000546 <main+0x1e>
 800056e:	bf00      	nop
 8000570:	200000bc 	.word	0x200000bc
 8000574:	20000028 	.word	0x20000028

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	@ 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	@ 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 f926 	bl	80037d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800059e:	f000 fd7b 	bl	8001098 <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f000 f8e8 	bl	800077c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b8:	2360      	movs	r3, #96	@ 0x60
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fe1b 	bl	8001200 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005d0:	f000 f8d4 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fa21 	bl	8001a34 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f8:	f000 f8c0 	bl	800077c <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	@ 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 800060a:	4a23      	ldr	r2, [pc, #140]	@ (8000698 <MX_LPUART1_UART_Init+0x94>)
 800060c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800060e:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000610:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000614:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000648:	2200      	movs	r2, #0
 800064a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800064c:	4811      	ldr	r0, [pc, #68]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 800064e:	f002 f9c7 	bl	80029e0 <HAL_UART_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000658:	f000 f890 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065c:	2100      	movs	r1, #0
 800065e:	480d      	ldr	r0, [pc, #52]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000660:	f002 fff0 	bl	8003644 <HAL_UARTEx_SetTxFifoThreshold>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800066a:	f000 f887 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066e:	2100      	movs	r1, #0
 8000670:	4808      	ldr	r0, [pc, #32]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000672:	f003 f825 	bl	80036c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800067c:	f000 f87e 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_LPUART1_UART_Init+0x90>)
 8000682:	f002 ffa6 	bl	80035d2 <HAL_UARTEx_DisableFifoMode>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800068c:	f000 f876 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	40008000 	.word	0x40008000

0800069c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_UART4_Init+0x90>)
 80006a2:	4a23      	ldr	r2, [pc, #140]	@ (8000730 <MX_UART4_Init+0x94>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_UART4_Init+0x90>)
 80006a8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80006ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_UART4_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_UART4_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <MX_UART4_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_UART4_Init+0x90>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_UART4_Init+0x90>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_UART4_Init+0x90>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <MX_UART4_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_UART4_Init+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_UART4_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006e4:	4811      	ldr	r0, [pc, #68]	@ (800072c <MX_UART4_Init+0x90>)
 80006e6:	f002 f97b 	bl	80029e0 <HAL_UART_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80006f0:	f000 f844 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_UART4_Init+0x90>)
 80006f8:	f002 ffa4 	bl	8003644 <HAL_UARTEx_SetTxFifoThreshold>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000702:	f000 f83b 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4808      	ldr	r0, [pc, #32]	@ (800072c <MX_UART4_Init+0x90>)
 800070a:	f002 ffd9 	bl	80036c0 <HAL_UARTEx_SetRxFifoThreshold>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000714:	f000 f832 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_UART4_Init+0x90>)
 800071a:	f002 ff5a 	bl	80035d2 <HAL_UARTEx_DisableFifoMode>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000724:	f000 f82a 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000bc 	.word	0x200000bc
 8000730:	40004c00 	.word	0x40004c00

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x44>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <MX_GPIO_Init+0x44>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_GPIO_Init+0x44>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_GPIO_Init+0x44>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a08      	ldr	r2, [pc, #32]	@ (8000778 <MX_GPIO_Init+0x44>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_GPIO_Init+0x44>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800076a:	f000 fd39 	bl	80011e0 <HAL_PWREx_EnableVddIO2>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000792:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	@ 0x60
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0b2      	sub	sp, #200	@ 0xc8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	2294      	movs	r2, #148	@ 0x94
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fff1 	bl	80037d8 <memset>
  if(huart->Instance==LPUART1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a54      	ldr	r2, [pc, #336]	@ (800094c <HAL_UART_MspInit+0x17c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d15f      	bne.n	80008c0 <HAL_UART_MspInit+0xf0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000800:	2320      	movs	r3, #32
 8000802:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000804:	2300      	movs	r3, #0
 8000806:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fbcf 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000818:	f7ff ffb0 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800081c:	4b4c      	ldr	r3, [pc, #304]	@ (8000950 <HAL_UART_MspInit+0x180>)
 800081e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000820:	4a4b      	ldr	r2, [pc, #300]	@ (8000950 <HAL_UART_MspInit+0x180>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000828:	4b49      	ldr	r3, [pc, #292]	@ (8000950 <HAL_UART_MspInit+0x180>)
 800082a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	4b46      	ldr	r3, [pc, #280]	@ (8000950 <HAL_UART_MspInit+0x180>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000838:	4a45      	ldr	r2, [pc, #276]	@ (8000950 <HAL_UART_MspInit+0x180>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000840:	4b43      	ldr	r3, [pc, #268]	@ (8000950 <HAL_UART_MspInit+0x180>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800084c:	4b40      	ldr	r3, [pc, #256]	@ (8000950 <HAL_UART_MspInit+0x180>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	4a3f      	ldr	r2, [pc, #252]	@ (8000950 <HAL_UART_MspInit+0x180>)
 8000852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000858:	4b3d      	ldr	r3, [pc, #244]	@ (8000950 <HAL_UART_MspInit+0x180>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000864:	f000 fcbc 	bl	80011e0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000868:	2302      	movs	r3, #2
 800086a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000880:	2308      	movs	r3, #8
 8000882:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800088a:	4619      	mov	r1, r3
 800088c:	4831      	ldr	r0, [pc, #196]	@ (8000954 <HAL_UART_MspInit+0x184>)
 800088e:	f000 fa51 	bl	8000d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000896:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ac:	2308      	movs	r3, #8
 80008ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4827      	ldr	r0, [pc, #156]	@ (8000958 <HAL_UART_MspInit+0x188>)
 80008ba:	f000 fa3b 	bl	8000d34 <HAL_GPIO_Init>
    /* USER CODE BEGIN UART4_MspInit 1 */

    /* USER CODE END UART4_MspInit 1 */
  }

}
 80008be:	e040      	b.n	8000942 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==UART4)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a25      	ldr	r2, [pc, #148]	@ (800095c <HAL_UART_MspInit+0x18c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d13b      	bne.n	8000942 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80008ca:	2308      	movs	r3, #8
 80008cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fb6a 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_UART_MspInit+0x116>
      Error_Handler();
 80008e2:	f7ff ff4b 	bl	800077c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <HAL_UART_MspInit+0x180>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ea:	4a19      	ldr	r2, [pc, #100]	@ (8000950 <HAL_UART_MspInit+0x180>)
 80008ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <HAL_UART_MspInit+0x180>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <HAL_UART_MspInit+0x180>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <HAL_UART_MspInit+0x180>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <HAL_UART_MspInit+0x180>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000916:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800091a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000930:	2308      	movs	r3, #8
 8000932:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <HAL_UART_MspInit+0x184>)
 800093e:	f000 f9f9 	bl	8000d34 <HAL_GPIO_Init>
}
 8000942:	bf00      	nop
 8000944:	37c8      	adds	r7, #200	@ 0xc8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40008000 	.word	0x40008000
 8000950:	40021000 	.word	0x40021000
 8000954:	48000800 	.word	0x48000800
 8000958:	48001800 	.word	0x48001800
 800095c:	40004c00 	.word	0x40004c00

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f893 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e8:	f7ff ffea 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	@ (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	@ (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f002 fee9 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fd87 	bl	8000528 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a1c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	080038c8 	.word	0x080038c8
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	20000154 	.word	0x20000154

08000a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_IRQHandler>

08000a36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f943 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f80e 	bl	8000a68 <HAL_InitTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d002      	beq.n	8000a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e001      	b.n	8000a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a58:	f7ff fe96 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d023      	beq.n	8000ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_InitTick+0x70>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <HAL_InitTick+0x6c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f941 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10f      	bne.n	8000abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f919 	bl	8000ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_InitTick+0x74>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e007      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e004      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e001      	b.n	8000ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000150 	.word	0x20000150

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000150 	.word	0x20000150

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffde 	bl	8000b08 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff47 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff5c 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb0 	bl	8000c88 <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d42:	e166      	b.n	8001012 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 8158 	beq.w	800100c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d005      	beq.n	8000d74 <HAL_GPIO_Init+0x40>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d017      	beq.n	8000e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d123      	bne.n	8000e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	6939      	ldr	r1, [r7, #16]
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0203 	and.w	r2, r3, #3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 80b2 	beq.w	800100c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea8:	4b61      	ldr	r3, [pc, #388]	@ (8001030 <HAL_GPIO_Init+0x2fc>)
 8000eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eac:	4a60      	ldr	r2, [pc, #384]	@ (8001030 <HAL_GPIO_Init+0x2fc>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001030 <HAL_GPIO_Init+0x2fc>)
 8000eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8001034 <HAL_GPIO_Init+0x300>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eea:	d02b      	beq.n	8000f44 <HAL_GPIO_Init+0x210>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a52      	ldr	r2, [pc, #328]	@ (8001038 <HAL_GPIO_Init+0x304>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d025      	beq.n	8000f40 <HAL_GPIO_Init+0x20c>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a51      	ldr	r2, [pc, #324]	@ (800103c <HAL_GPIO_Init+0x308>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d01f      	beq.n	8000f3c <HAL_GPIO_Init+0x208>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a50      	ldr	r2, [pc, #320]	@ (8001040 <HAL_GPIO_Init+0x30c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d019      	beq.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <HAL_GPIO_Init+0x310>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d013      	beq.n	8000f34 <HAL_GPIO_Init+0x200>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001048 <HAL_GPIO_Init+0x314>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1fc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a4d      	ldr	r2, [pc, #308]	@ (800104c <HAL_GPIO_Init+0x318>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1f8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001050 <HAL_GPIO_Init+0x31c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1f4>
 8000f24:	2307      	movs	r3, #7
 8000f26:	e00e      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f28:	2308      	movs	r3, #8
 8000f2a:	e00c      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	e00a      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f30:	2305      	movs	r3, #5
 8000f32:	e008      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f34:	2304      	movs	r3, #4
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e004      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f44:	2300      	movs	r3, #0
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	f002 0203 	and.w	r2, r2, #3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4093      	lsls	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f56:	4937      	ldr	r1, [pc, #220]	@ (8001034 <HAL_GPIO_Init+0x300>)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f64:	4b3b      	ldr	r3, [pc, #236]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f88:	4a32      	ldr	r2, [pc, #200]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb2:	4a28      	ldr	r2, [pc, #160]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001006:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	f47f ae91 	bne.w	8000d44 <HAL_GPIO_Init+0x10>
  }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000
 8001038:	48000400 	.word	0x48000400
 800103c:	48000800 	.word	0x48000800
 8001040:	48000c00 	.word	0x48000c00
 8001044:	48001000 	.word	0x48001000
 8001048:	48001400 	.word	0x48001400
 800104c:	48001800 	.word	0x48001800
 8001050:	48001c00 	.word	0x48001c00
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <HAL_PWREx_GetVoltageRange+0x3c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001068:	d102      	bne.n	8001070 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106e:	e00b      	b.n	8001088 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800107e:	d102      	bne.n	8001086 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001084:	e000      	b.n	8001088 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001086:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40007000 	.word	0x40007000

08001098 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d141      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010a6:	4b4b      	ldr	r3, [pc, #300]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b2:	d131      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010b4:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ba:	4a46      	ldr	r2, [pc, #280]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010cc:	4a41      	ldr	r2, [pc, #260]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80010d4:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2232      	movs	r2, #50	@ 0x32
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	4a3f      	ldr	r2, [pc, #252]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9b      	lsrs	r3, r3, #18
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ea:	e002      	b.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010fe:	d102      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f2      	bne.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001112:	d158      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e057      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001118:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111e:	4a2d      	ldr	r2, [pc, #180]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001128:	e04d      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001130:	d141      	bne.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001132:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800113a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113e:	d131      	bne.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001158:	4a1e      	ldr	r2, [pc, #120]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800115e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2232      	movs	r2, #50	@ 0x32
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9b      	lsrs	r3, r3, #18
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001176:	e002      	b.n	800117e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3b01      	subs	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800118a:	d102      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f2      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800119e:	d112      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e011      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011b4:	e007      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40007000 	.word	0x40007000
 80011d8:	20000000 	.word	0x20000000
 80011dc:	431bde83 	.word	0x431bde83

080011e0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ee:	6053      	str	r3, [r2, #4]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000

08001200 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 bc08 	b.w	8001a24 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001214:	4b96      	ldr	r3, [pc, #600]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80e4 	beq.w	80013fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x4c>
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	f040 808b 	bne.w	800135a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b01      	cmp	r3, #1
 8001248:	f040 8087 	bne.w	800135a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124c:	4b88      	ldr	r3, [pc, #544]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x64>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e3df      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4b81      	ldr	r3, [pc, #516]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_RCC_OscConfig+0x7e>
 8001274:	4b7e      	ldr	r3, [pc, #504]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800127c:	e005      	b.n	800128a <HAL_RCC_OscConfig+0x8a>
 800127e:	4b7c      	ldr	r3, [pc, #496]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800128a:	4293      	cmp	r3, r2
 800128c:	d223      	bcs.n	80012d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fdcc 	bl	8001e30 <RCC_SetFlashLatencyFromMSIRange>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e3c0      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a2:	4b73      	ldr	r3, [pc, #460]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a72      	ldr	r2, [pc, #456]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	496d      	ldr	r1, [pc, #436]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	4968      	ldr	r1, [pc, #416]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e025      	b.n	8001322 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d6:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b63      	ldr	r3, [pc, #396]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4960      	ldr	r1, [pc, #384]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	495b      	ldr	r1, [pc, #364]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fd8c 	bl	8001e30 <RCC_SetFlashLatencyFromMSIRange>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e380      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001322:	f000 fcc1 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001326:	4602      	mov	r2, r0
 8001328:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	4950      	ldr	r1, [pc, #320]	@ (8001474 <HAL_RCC_OscConfig+0x274>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a4e      	ldr	r2, [pc, #312]	@ (8001478 <HAL_RCC_OscConfig+0x278>)
 8001340:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001342:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_RCC_OscConfig+0x27c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fb8e 	bl	8000a68 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d052      	beq.n	80013fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	e364      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d032      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001362:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a42      	ldr	r2, [pc, #264]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136e:	f7ff fbcb 	bl	8000b08 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001376:	f7ff fbc7 	bl	8000b08 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e34d      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001388:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001394:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a35      	ldr	r2, [pc, #212]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b33      	ldr	r3, [pc, #204]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4930      	ldr	r1, [pc, #192]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	492b      	ldr	r1, [pc, #172]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
 80013c6:	e01a      	b.n	80013fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a28      	ldr	r2, [pc, #160]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb98 	bl	8000b08 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013dc:	f7ff fb94 	bl	8000b08 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e31a      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ee:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1dc>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d073      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x21c>
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d10e      	bne.n	8001434 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d063      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d15f      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e2f7      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x24c>
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e025      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001454:	d114      	bne.n	8001480 <HAL_RCC_OscConfig+0x280>
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a02      	ldr	r2, [pc, #8]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e013      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 8001470:	40021000 	.word	0x40021000
 8001474:	08003848 	.word	0x08003848
 8001478:	20000000 	.word	0x20000000
 800147c:	20000004 	.word	0x20000004
 8001480:	4ba0      	ldr	r3, [pc, #640]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a9f      	ldr	r2, [pc, #636]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b9d      	ldr	r3, [pc, #628]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a9c      	ldr	r2, [pc, #624]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb32 	bl	8000b08 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb2e 	bl	8000b08 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e2b4      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ba:	4b92      	ldr	r3, [pc, #584]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2a8>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb1e 	bl	8000b08 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb1a 	bl	8000b08 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e2a0      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e2:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2d0>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d060      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <HAL_RCC_OscConfig+0x310>
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d119      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d116      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	4b7c      	ldr	r3, [pc, #496]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x328>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e27d      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b76      	ldr	r3, [pc, #472]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	4973      	ldr	r1, [pc, #460]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	e040      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d023      	beq.n	800158e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001546:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6e      	ldr	r2, [pc, #440]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fad9 	bl	8000b08 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fad5 	bl	8000b08 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e25b      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b62      	ldr	r3, [pc, #392]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	495f      	ldr	r1, [pc, #380]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e018      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158e:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5c      	ldr	r2, [pc, #368]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fab5 	bl	8000b08 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fab1 	bl	8000b08 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e237      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d03c      	beq.n	8001646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01c      	beq.n	800160e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015da:	4a4a      	ldr	r2, [pc, #296]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa90 	bl	8000b08 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fa8c 	bl	8000b08 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e212      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ef      	beq.n	80015ec <HAL_RCC_OscConfig+0x3ec>
 800160c:	e01b      	b.n	8001646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001614:	4a3b      	ldr	r2, [pc, #236]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fa73 	bl	8000b08 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fa6f 	bl	8000b08 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1f5      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ef      	bne.n	8001626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80a6 	beq.w	80017a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001658:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167c:	2301      	movs	r3, #1
 800167e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d118      	bne.n	80016be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001698:	f7ff fa36 	bl	8000b08 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a0:	f7ff fa32 	bl	8000b08 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1b8      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d6:	e029      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d115      	bne.n	800170c <HAL_RCC_OscConfig+0x50c>
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e6:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a03      	ldr	r2, [pc, #12]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	4b9d      	ldr	r3, [pc, #628]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001712:	4a9c      	ldr	r2, [pc, #624]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171c:	4b99      	ldr	r3, [pc, #612]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d016      	beq.n	8001762 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff f9e8 	bl	8000b08 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff f9e4 	bl	8000b08 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e168      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001752:	4b8c      	ldr	r3, [pc, #560]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ed      	beq.n	800173c <HAL_RCC_OscConfig+0x53c>
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff f9d1 	bl	8000b08 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f9cd 	bl	8000b08 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e151      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001780:	4b80      	ldr	r3, [pc, #512]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ed      	bne.n	800176a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b7b      	ldr	r3, [pc, #492]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a7a      	ldr	r2, [pc, #488]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03c      	beq.n	8001826 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01c      	beq.n	80017ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017b4:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ba:	4a72      	ldr	r2, [pc, #456]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f9a0 	bl	8000b08 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017cc:	f7ff f99c 	bl	8000b08 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e122      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017de:	4b69      	ldr	r3, [pc, #420]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ef      	beq.n	80017cc <HAL_RCC_OscConfig+0x5cc>
 80017ec:	e01b      	b.n	8001826 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ee:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017f4:	4a63      	ldr	r2, [pc, #396]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff f983 	bl	8000b08 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001806:	f7ff f97f 	bl	8000b08 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e105      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001818:	4b5a      	ldr	r3, [pc, #360]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800181a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ef      	bne.n	8001806 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80f9 	beq.w	8001a22 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80cf 	bne.w	80019d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800183a:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0203 	and.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	429a      	cmp	r2, r3
 800184c:	d12c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	3b01      	subs	r3, #1
 800185a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d123      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d11b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d113      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d071      	beq.n	800198c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d068      	beq.n	8001980 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018ae:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018ba:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0ac      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d6:	f7ff f917 	bl	8000b08 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff f913 	bl	8000b08 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e099      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fc:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x788>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800190c:	3a01      	subs	r2, #1
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001916:	0212      	lsls	r2, r2, #8
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800191e:	0852      	lsrs	r2, r2, #1
 8001920:	3a01      	subs	r2, #1
 8001922:	0552      	lsls	r2, r2, #21
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800192a:	0852      	lsrs	r2, r2, #1
 800192c:	3a01      	subs	r2, #1
 800192e:	0652      	lsls	r2, r2, #25
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001936:	06d2      	lsls	r2, r2, #27
 8001938:	430a      	orrs	r2, r1
 800193a:	4912      	ldr	r1, [pc, #72]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800193c:	4313      	orrs	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001958:	f7ff f8d6 	bl	8000b08 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f8d2 	bl	8000b08 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e058      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197e:	e050      	b.n	8001a22 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e04f      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
 8001984:	40021000 	.word	0x40021000
 8001988:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d144      	bne.n	8001a22 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a23      	ldr	r2, [pc, #140]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b0:	f7ff f8aa 	bl	8000b08 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f8a6 	bl	8000b08 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e02c      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x7b8>
 80019d6:	e024      	b.n	8001a22 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d01f      	beq.n	8001a1e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff f88d 	bl	8000b08 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff f889 	bl	8000b08 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e00f      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4905      	ldr	r1, [pc, #20]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_OscConfig+0x830>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
 8001a1c:	e001      	b.n	8001a22 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	feeefffc 	.word	0xfeeefffc

08001a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e11d      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b90      	ldr	r3, [pc, #576]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d910      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 020f 	bic.w	r2, r3, #15
 8001a62:	498b      	ldr	r1, [pc, #556]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b89      	ldr	r3, [pc, #548]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e105      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	4b81      	ldr	r3, [pc, #516]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d908      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b7e      	ldr	r3, [pc, #504]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	497b      	ldr	r1, [pc, #492]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d079      	beq.n	8001baa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d11e      	bne.n	8001afc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b75      	ldr	r3, [pc, #468]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0dc      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ace:	f000 fa09 	bl	8001ee4 <RCC_GetSysClockFreqFromPLLSource>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a70      	ldr	r2, [pc, #448]	@ (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d946      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ada:	4b6e      	ldr	r3, [pc, #440]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d140      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aee:	4a69      	ldr	r2, [pc, #420]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e035      	b.n	8001b68 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b04:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d115      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b9      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0ad      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2c:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0a5      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b3c:	f000 f8b4 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a55      	ldr	r2, [pc, #340]	@ (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d90f      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b48:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b54:	4b4f      	ldr	r3, [pc, #316]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b62:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b68:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 0203 	bic.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4947      	ldr	r1, [pc, #284]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7a:	f7fe ffc5 	bl	8000b08 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7fe ffc1 	bl	8000b08 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e077      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	4b3e      	ldr	r3, [pc, #248]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 020c 	and.w	r2, r3, #12
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d1eb      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b80      	cmp	r3, #128	@ 0x80
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bb0:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a37      	ldr	r2, [pc, #220]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d208      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	492b      	ldr	r1, [pc, #172]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d210      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 020f 	bic.w	r2, r3, #15
 8001c00:	4923      	ldr	r1, [pc, #140]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e036      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4918      	ldr	r1, [pc, #96]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4910      	ldr	r1, [pc, #64]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c58:	f000 f826 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <HAL_RCC_ClockConfig+0x268>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x26c>)
 8001c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_RCC_ClockConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fef3 	bl	8000a68 <HAL_InitTick>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	04c4b400 	.word	0x04c4b400
 8001c9c:	08003848 	.word	0x08003848
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x34>
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d121      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d11e      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cdc:	4b34      	ldr	r3, [pc, #208]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce8:	4b31      	ldr	r3, [pc, #196]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e005      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d04:	4a2b      	ldr	r2, [pc, #172]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10d      	bne.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	e004      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d2c:	4b23      	ldr	r3, [pc, #140]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d134      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d003      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0xac>
 8001d4c:	e005      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d50:	617b      	str	r3, [r7, #20]
      break;
 8001d52:	e005      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d56:	617b      	str	r3, [r7, #20]
      break;
 8001d58:	e002      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	617b      	str	r3, [r7, #20]
      break;
 8001d5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	0e5b      	lsrs	r3, r3, #25
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	3301      	adds	r3, #1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001da0:	69bb      	ldr	r3, [r7, #24]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08003860 	.word	0x08003860
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200

08001dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ddc:	f7ff fff0 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4904      	ldr	r1, [pc, #16]	@ (8001e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	08003858 	.word	0x08003858

08001e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e08:	f7ff ffda 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0adb      	lsrs	r3, r3, #11
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4904      	ldr	r1, [pc, #16]	@ (8001e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08003858 	.word	0x08003858

08001e30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e48:	f7ff f906 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001e4c:	6178      	str	r0, [r7, #20]
 8001e4e:	e014      	b.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e68:	f7ff f8f6 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001e6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e72:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e80:	d10b      	bne.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	@ 0x80
 8001e86:	d913      	bls.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e8c:	d902      	bls.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8e:	2302      	movs	r3, #2
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	e00d      	b.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	e00a      	b.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e9e:	d902      	bls.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	e004      	b.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b70      	cmp	r3, #112	@ 0x70
 8001eaa:	d101      	bne.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eac:	2301      	movs	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 020f 	bic.w	r2, r3, #15
 8001eb8:	4909      	ldr	r1, [pc, #36]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eea:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d00b      	beq.n	8001f12 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d825      	bhi.n	8001f4c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d008      	beq.n	8001f18 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d11f      	bne.n	8001f4c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001f0e:	613b      	str	r3, [r7, #16]
    break;
 8001f10:	e01f      	b.n	8001f52 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001f12:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001f14:	613b      	str	r3, [r7, #16]
    break;
 8001f16:	e01c      	b.n	8001f52 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f18:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e005      	b.n	8001f40 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001f40:	4a1a      	ldr	r2, [pc, #104]	@ (8001fac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	613b      	str	r3, [r7, #16]
    break;
 8001f4a:	e002      	b.n	8001f52 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
    break;
 8001f50:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f52:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	fb03 f202 	mul.w	r2, r3, r2
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0e5b      	lsrs	r3, r3, #25
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f92:	683b      	ldr	r3, [r7, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	08003860 	.word	0x08003860

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d040      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd0:	2b80      	cmp	r3, #128	@ 0x80
 8001fd2:	d02a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001fd4:	2b80      	cmp	r3, #128	@ 0x80
 8001fd6:	d825      	bhi.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001fd8:	2b60      	cmp	r3, #96	@ 0x60
 8001fda:	d026      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001fdc:	2b60      	cmp	r3, #96	@ 0x60
 8001fde:	d821      	bhi.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001fe0:	2b40      	cmp	r3, #64	@ 0x40
 8001fe2:	d006      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d81d      	bhi.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d010      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001ff0:	e018      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff2:	4b89      	ldr	r3, [pc, #548]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4a88      	ldr	r2, [pc, #544]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffe:	e015      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fb02 	bl	8002610 <RCCEx_PLLSAI1_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002010:	e00c      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3320      	adds	r3, #32
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fbed 	bl	80027f8 <RCCEx_PLLSAI2_Config>
 800201e:	4603      	mov	r3, r0
 8002020:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002022:	e003      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	74fb      	strb	r3, [r7, #19]
      break;
 8002028:	e000      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800202a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10b      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002032:	4b79      	ldr	r3, [pc, #484]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002034:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002038:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002040:	4975      	ldr	r1, [pc, #468]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002048:	e001      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d047      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002062:	d030      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002068:	d82a      	bhi.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800206a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800206e:	d02a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002074:	d824      	bhi.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800207a:	d008      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800207c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002080:	d81e      	bhi.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800208a:	d010      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800208c:	e018      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800208e:	4b62      	ldr	r3, [pc, #392]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	4a61      	ldr	r2, [pc, #388]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002098:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209a:	e015      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fab4 	bl	8002610 <RCCEx_PLLSAI1_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ac:	e00c      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3320      	adds	r3, #32
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fb9f 	bl	80027f8 <RCCEx_PLLSAI2_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020be:	e003      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	74fb      	strb	r3, [r7, #19]
      break;
 80020c4:	e000      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80020c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ce:	4b52      	ldr	r3, [pc, #328]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020dc:	494e      	ldr	r1, [pc, #312]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80020e4:	e001      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e6:	7cfb      	ldrb	r3, [r7, #19]
 80020e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 809f 	beq.w	8002236 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020fc:	4b46      	ldr	r3, [pc, #280]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800210c:	2300      	movs	r3, #0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002116:	4a40      	ldr	r2, [pc, #256]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	6593      	str	r3, [r2, #88]	@ 0x58
 800211e:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212e:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a3a      	ldr	r2, [pc, #232]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002138:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800213a:	f7fe fce5 	bl	8000b08 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002140:	e009      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7fe fce1 	bl	8000b08 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d902      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	74fb      	strb	r3, [r7, #19]
        break;
 8002154:	e005      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002156:	4b31      	ldr	r3, [pc, #196]	@ (800221c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ef      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d15b      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002168:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002172:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01f      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	429a      	cmp	r2, r3
 8002184:	d019      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002186:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002190:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002198:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021b2:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d016      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fca0 	bl	8000b08 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ca:	e00b      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe fc9c 	bl	8000b08 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d902      	bls.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	74fb      	strb	r3, [r7, #19]
            break;
 80021e2:	e006      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ec      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80021f2:	7cfb      	ldrb	r3, [r7, #19]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10c      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002208:	4903      	ldr	r1, [pc, #12]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002210:	e008      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	74bb      	strb	r3, [r7, #18]
 8002216:	e005      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002218:	40021000 	.word	0x40021000
 800221c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002224:	7c7b      	ldrb	r3, [r7, #17]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4ba0      	ldr	r3, [pc, #640]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	4a9f      	ldr	r2, [pc, #636]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002242:	4b9a      	ldr	r3, [pc, #616]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f023 0203 	bic.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	4996      	ldr	r1, [pc, #600]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002264:	4b91      	ldr	r3, [pc, #580]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f023 020c 	bic.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	498e      	ldr	r1, [pc, #568]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002286:	4b89      	ldr	r3, [pc, #548]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002294:	4985      	ldr	r1, [pc, #532]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022a8:	4b80      	ldr	r3, [pc, #512]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	497d      	ldr	r1, [pc, #500]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ca:	4b78      	ldr	r3, [pc, #480]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d8:	4974      	ldr	r1, [pc, #464]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022ec:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fa:	496c      	ldr	r1, [pc, #432]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800230e:	4b67      	ldr	r3, [pc, #412]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002314:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800231c:	4963      	ldr	r1, [pc, #396]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002330:	4b5e      	ldr	r3, [pc, #376]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800233e:	495b      	ldr	r1, [pc, #364]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002352:	4b56      	ldr	r3, [pc, #344]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002358:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002360:	4952      	ldr	r1, [pc, #328]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002374:	4b4d      	ldr	r3, [pc, #308]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	494a      	ldr	r1, [pc, #296]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002396:	4b45      	ldr	r3, [pc, #276]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a4:	4941      	ldr	r1, [pc, #260]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023b8:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023be:	f023 0203 	bic.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	4939      	ldr	r1, [pc, #228]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d028      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023da:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e8:	4930      	ldr	r1, [pc, #192]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f8:	d106      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fa:	4b2c      	ldr	r3, [pc, #176]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a2b      	ldr	r2, [pc, #172]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002404:	60d3      	str	r3, [r2, #12]
 8002406:	e011      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002410:	d10c      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f8f9 	bl	8002610 <RCCEx_PLLSAI1_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d04d      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800243c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002440:	d108      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002442:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002444:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002448:	4a18      	ldr	r2, [pc, #96]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800244a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002452:	e012      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002454:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800245a:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800245c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002460:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002472:	490e      	ldr	r1, [pc, #56]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800247e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002482:	d106      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800248e:	60d3      	str	r3, [r2, #12]
 8002490:	e020      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800249a:	d109      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a02      	ldr	r2, [pc, #8]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
 80024a8:	e014      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	2101      	movs	r1, #1
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f8a5 	bl	8002610 <RCCEx_PLLSAI1_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d028      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e0:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024ee:	4947      	ldr	r1, [pc, #284]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024fe:	d106      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002500:	4b42      	ldr	r3, [pc, #264]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a41      	ldr	r2, [pc, #260]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800250a:	60d3      	str	r3, [r2, #12]
 800250c:	e011      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002512:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002516:	d10c      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f876 	bl	8002610 <RCCEx_PLLSAI1_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01e      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800253e:	4b33      	ldr	r3, [pc, #204]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002544:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800254e:	492f      	ldr	r1, [pc, #188]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800255c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002560:	d10c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2102      	movs	r1, #2
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f851 	bl	8002610 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002588:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800258a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800258e:	f023 0204 	bic.w	r2, r3, #4
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002598:	491c      	ldr	r1, [pc, #112]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025ac:	4b17      	ldr	r3, [pc, #92]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025b2:	f023 0218 	bic.w	r2, r3, #24
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025bc:	4913      	ldr	r1, [pc, #76]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d017      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e0:	490a      	ldr	r1, [pc, #40]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a04      	ldr	r2, [pc, #16]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002600:	7cbb      	ldrb	r3, [r7, #18]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800261e:	4b72      	ldr	r3, [pc, #456]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00e      	beq.n	8002648 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800262a:	4b6f      	ldr	r3, [pc, #444]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d103      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
       ||
 800263e:	2b00      	cmp	r3, #0
 8002640:	d142      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e03f      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d018      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x72>
 8002650:	2b03      	cmp	r3, #3
 8002652:	d825      	bhi.n	80026a0 <RCCEx_PLLSAI1_Config+0x90>
 8002654:	2b01      	cmp	r3, #1
 8002656:	d002      	beq.n	800265e <RCCEx_PLLSAI1_Config+0x4e>
 8002658:	2b02      	cmp	r3, #2
 800265a:	d009      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x60>
 800265c:	e020      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800265e:	4b62      	ldr	r3, [pc, #392]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11d      	bne.n	80026a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e01a      	b.n	80026a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002670:	4b5d      	ldr	r3, [pc, #372]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e013      	b.n	80026aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002682:	4b59      	ldr	r3, [pc, #356]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800268e:	4b56      	ldr	r3, [pc, #344]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800269e:	e006      	b.n	80026ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e004      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80026ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80026b6:	4b4c      	ldr	r3, [pc, #304]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4949      	ldr	r1, [pc, #292]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 8086 	bne.w	80027dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026d0:	4b45      	ldr	r3, [pc, #276]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a44      	ldr	r2, [pc, #272]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fa14 	bl	8000b08 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e4:	f7fe fa10 	bl	8000b08 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
        break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f8:	4b3b      	ldr	r3, [pc, #236]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d168      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d113      	bne.n	8002738 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002710:	4b35      	ldr	r3, [pc, #212]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	4b35      	ldr	r3, [pc, #212]	@ (80027ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002716:	4013      	ands	r3, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	0211      	lsls	r1, r2, #8
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68d2      	ldr	r2, [r2, #12]
 8002722:	06d2      	lsls	r2, r2, #27
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6852      	ldr	r2, [r2, #4]
 800272a:	3a01      	subs	r2, #1
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	430a      	orrs	r2, r1
 8002730:	492d      	ldr	r1, [pc, #180]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002732:	4313      	orrs	r3, r2
 8002734:	610b      	str	r3, [r1, #16]
 8002736:	e02d      	b.n	8002794 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d115      	bne.n	800276a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800273e:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6892      	ldr	r2, [r2, #8]
 800274a:	0211      	lsls	r1, r2, #8
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6912      	ldr	r2, [r2, #16]
 8002750:	0852      	lsrs	r2, r2, #1
 8002752:	3a01      	subs	r2, #1
 8002754:	0552      	lsls	r2, r2, #21
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6852      	ldr	r2, [r2, #4]
 800275c:	3a01      	subs	r2, #1
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	430a      	orrs	r2, r1
 8002762:	4921      	ldr	r1, [pc, #132]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	610b      	str	r3, [r1, #16]
 8002768:	e014      	b.n	8002794 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800276a:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	0211      	lsls	r1, r2, #8
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6952      	ldr	r2, [r2, #20]
 800277c:	0852      	lsrs	r2, r2, #1
 800277e:	3a01      	subs	r2, #1
 8002780:	0652      	lsls	r2, r2, #25
 8002782:	4311      	orrs	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6852      	ldr	r2, [r2, #4]
 8002788:	3a01      	subs	r2, #1
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	430a      	orrs	r2, r1
 800278e:	4916      	ldr	r1, [pc, #88]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002790:	4313      	orrs	r3, r2
 8002792:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002794:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a13      	ldr	r2, [pc, #76]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800279a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800279e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe f9b2 	bl	8000b08 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027a6:	e009      	b.n	80027bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a8:	f7fe f9ae 	bl	8000b08 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d902      	bls.n	80027bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	73fb      	strb	r3, [r7, #15]
          break;
 80027ba:	e005      	b.n	80027c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ef      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	4904      	ldr	r1, [pc, #16]	@ (80027e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	07ff800f 	.word	0x07ff800f
 80027f0:	ff9f800f 	.word	0xff9f800f
 80027f4:	f9ff800f 	.word	0xf9ff800f

080027f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002806:	4b72      	ldr	r3, [pc, #456]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002812:	4b6f      	ldr	r3, [pc, #444]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0203 	and.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d103      	bne.n	800282a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
       ||
 8002826:	2b00      	cmp	r3, #0
 8002828:	d142      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e03f      	b.n	80028b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d018      	beq.n	800286a <RCCEx_PLLSAI2_Config+0x72>
 8002838:	2b03      	cmp	r3, #3
 800283a:	d825      	bhi.n	8002888 <RCCEx_PLLSAI2_Config+0x90>
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0x4e>
 8002840:	2b02      	cmp	r3, #2
 8002842:	d009      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x60>
 8002844:	e020      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002846:	4b62      	ldr	r3, [pc, #392]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11d      	bne.n	800288e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e01a      	b.n	800288e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002858:	4b5d      	ldr	r3, [pc, #372]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e013      	b.n	8002892 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286a:	4b59      	ldr	r3, [pc, #356]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002876:	4b56      	ldr	r3, [pc, #344]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002886:	e006      	b.n	8002896 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e004      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002896:	bf00      	nop
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d108      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800289e:	4b4c      	ldr	r3, [pc, #304]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4949      	ldr	r1, [pc, #292]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 8086 	bne.w	80029c4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028b8:	4b45      	ldr	r3, [pc, #276]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a44      	ldr	r2, [pc, #272]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe f920 	bl	8000b08 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ca:	e009      	b.n	80028e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028cc:	f7fe f91c 	bl	8000b08 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d902      	bls.n	80028e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	73fb      	strb	r3, [r7, #15]
        break;
 80028de:	e005      	b.n	80028ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028e0:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ef      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d168      	bne.n	80029c4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d113      	bne.n	8002920 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f8:	4b35      	ldr	r3, [pc, #212]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	4b35      	ldr	r3, [pc, #212]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	0211      	lsls	r1, r2, #8
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	06d2      	lsls	r2, r2, #27
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6852      	ldr	r2, [r2, #4]
 8002912:	3a01      	subs	r2, #1
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	430a      	orrs	r2, r1
 8002918:	492d      	ldr	r1, [pc, #180]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	614b      	str	r3, [r1, #20]
 800291e:	e02d      	b.n	800297c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d115      	bne.n	8002952 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002926:	4b2a      	ldr	r3, [pc, #168]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	0211      	lsls	r1, r2, #8
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6912      	ldr	r2, [r2, #16]
 8002938:	0852      	lsrs	r2, r2, #1
 800293a:	3a01      	subs	r2, #1
 800293c:	0552      	lsls	r2, r2, #21
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6852      	ldr	r2, [r2, #4]
 8002944:	3a01      	subs	r2, #1
 8002946:	0112      	lsls	r2, r2, #4
 8002948:	430a      	orrs	r2, r1
 800294a:	4921      	ldr	r1, [pc, #132]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800294c:	4313      	orrs	r3, r2
 800294e:	614b      	str	r3, [r1, #20]
 8002950:	e014      	b.n	800297c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002952:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <RCCEx_PLLSAI2_Config+0x1e4>)
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6892      	ldr	r2, [r2, #8]
 800295e:	0211      	lsls	r1, r2, #8
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6952      	ldr	r2, [r2, #20]
 8002964:	0852      	lsrs	r2, r2, #1
 8002966:	3a01      	subs	r2, #1
 8002968:	0652      	lsls	r2, r2, #25
 800296a:	4311      	orrs	r1, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6852      	ldr	r2, [r2, #4]
 8002970:	3a01      	subs	r2, #1
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	430a      	orrs	r2, r1
 8002976:	4916      	ldr	r1, [pc, #88]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800297c:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002986:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe f8be 	bl	8000b08 <HAL_GetTick>
 800298c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800298e:	e009      	b.n	80029a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002990:	f7fe f8ba 	bl	8000b08 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d902      	bls.n	80029a4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	73fb      	strb	r3, [r7, #15]
          break;
 80029a2:	e005      	b.n	80029b0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029a4:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ef      	beq.n	8002990 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4904      	ldr	r1, [pc, #16]	@ (80029d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	07ff800f 	.word	0x07ff800f
 80029d8:	ff9f800f 	.word	0xff9f800f
 80029dc:	f9ff800f 	.word	0xf9ff800f

080029e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e042      	b.n	8002a78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7fd fee3 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2224      	movs	r2, #36	@ 0x24
 8002a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fbb2 	bl	8003194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8b3 	bl	8002b9c <UART_SetConfig>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e01b      	b.n	8002a78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fc31 	bl	80032d8 <UART_CheckIdleState>
 8002a76:	4603      	mov	r3, r0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	@ 0x28
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d17b      	bne.n	8002b92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_UART_Transmit+0x26>
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e074      	b.n	8002b94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2221      	movs	r2, #33	@ 0x21
 8002ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aba:	f7fe f825 	bl	8000b08 <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad8:	d108      	bne.n	8002aec <HAL_UART_Transmit+0x6c>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	e003      	b.n	8002af4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af4:	e030      	b.n	8002b58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	@ 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fc93 	bl	800342c <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e03d      	b.n	8002b94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10b      	bne.n	8002b36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	3302      	adds	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	e007      	b.n	8002b46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1c8      	bne.n	8002af6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2140      	movs	r1, #64	@ 0x40
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fc5c 	bl	800342c <UART_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e006      	b.n	8002b94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b08c      	sub	sp, #48	@ 0x30
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4baa      	ldr	r3, [pc, #680]	@ (8002e74 <UART_SetConfig+0x2d8>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a9f      	ldr	r2, [pc, #636]	@ (8002e78 <UART_SetConfig+0x2dc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c04:	4313      	orrs	r3, r2
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002c12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	f023 010f 	bic.w	r1, r3, #15
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a90      	ldr	r2, [pc, #576]	@ (8002e7c <UART_SetConfig+0x2e0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d125      	bne.n	8002c8c <UART_SetConfig+0xf0>
 8002c40:	4b8f      	ldr	r3, [pc, #572]	@ (8002e80 <UART_SetConfig+0x2e4>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d81a      	bhi.n	8002c84 <UART_SetConfig+0xe8>
 8002c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c54 <UART_SetConfig+0xb8>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002c75 	.word	0x08002c75
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c7d 	.word	0x08002c7d
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6a:	e116      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c72:	e112      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002c74:	2304      	movs	r3, #4
 8002c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c7a:	e10e      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c82:	e10a      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002c84:	2310      	movs	r3, #16
 8002c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c8a:	e106      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7c      	ldr	r2, [pc, #496]	@ (8002e84 <UART_SetConfig+0x2e8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d138      	bne.n	8002d08 <UART_SetConfig+0x16c>
 8002c96:	4b7a      	ldr	r3, [pc, #488]	@ (8002e80 <UART_SetConfig+0x2e4>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d82d      	bhi.n	8002d00 <UART_SetConfig+0x164>
 8002ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <UART_SetConfig+0x110>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002ce1 	.word	0x08002ce1
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002d01 	.word	0x08002d01
 8002cb8:	08002d01 	.word	0x08002d01
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002d01 	.word	0x08002d01
 8002cc4:	08002d01 	.word	0x08002d01
 8002cc8:	08002d01 	.word	0x08002d01
 8002ccc:	08002ce9 	.word	0x08002ce9
 8002cd0:	08002d01 	.word	0x08002d01
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	08002d01 	.word	0x08002d01
 8002cdc:	08002cf9 	.word	0x08002cf9
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce6:	e0d8      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cee:	e0d4      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf6:	e0d0      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfe:	e0cc      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d00:	2310      	movs	r3, #16
 8002d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d06:	e0c8      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002e88 <UART_SetConfig+0x2ec>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d125      	bne.n	8002d5e <UART_SetConfig+0x1c2>
 8002d12:	4b5b      	ldr	r3, [pc, #364]	@ (8002e80 <UART_SetConfig+0x2e4>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d1c:	2b30      	cmp	r3, #48	@ 0x30
 8002d1e:	d016      	beq.n	8002d4e <UART_SetConfig+0x1b2>
 8002d20:	2b30      	cmp	r3, #48	@ 0x30
 8002d22:	d818      	bhi.n	8002d56 <UART_SetConfig+0x1ba>
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d00a      	beq.n	8002d3e <UART_SetConfig+0x1a2>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d814      	bhi.n	8002d56 <UART_SetConfig+0x1ba>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <UART_SetConfig+0x19a>
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d008      	beq.n	8002d46 <UART_SetConfig+0x1aa>
 8002d34:	e00f      	b.n	8002d56 <UART_SetConfig+0x1ba>
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d3c:	e0ad      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d44:	e0a9      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d46:	2304      	movs	r3, #4
 8002d48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d4c:	e0a5      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d4e:	2308      	movs	r3, #8
 8002d50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d54:	e0a1      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d56:	2310      	movs	r3, #16
 8002d58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5c:	e09d      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a4a      	ldr	r2, [pc, #296]	@ (8002e8c <UART_SetConfig+0x2f0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d125      	bne.n	8002db4 <UART_SetConfig+0x218>
 8002d68:	4b45      	ldr	r3, [pc, #276]	@ (8002e80 <UART_SetConfig+0x2e4>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d74:	d016      	beq.n	8002da4 <UART_SetConfig+0x208>
 8002d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d78:	d818      	bhi.n	8002dac <UART_SetConfig+0x210>
 8002d7a:	2b80      	cmp	r3, #128	@ 0x80
 8002d7c:	d00a      	beq.n	8002d94 <UART_SetConfig+0x1f8>
 8002d7e:	2b80      	cmp	r3, #128	@ 0x80
 8002d80:	d814      	bhi.n	8002dac <UART_SetConfig+0x210>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <UART_SetConfig+0x1f0>
 8002d86:	2b40      	cmp	r3, #64	@ 0x40
 8002d88:	d008      	beq.n	8002d9c <UART_SetConfig+0x200>
 8002d8a:	e00f      	b.n	8002dac <UART_SetConfig+0x210>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d92:	e082      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d94:	2302      	movs	r3, #2
 8002d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9a:	e07e      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da2:	e07a      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002da4:	2308      	movs	r3, #8
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002daa:	e076      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002dac:	2310      	movs	r3, #16
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db2:	e072      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a35      	ldr	r2, [pc, #212]	@ (8002e90 <UART_SetConfig+0x2f4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12a      	bne.n	8002e14 <UART_SetConfig+0x278>
 8002dbe:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <UART_SetConfig+0x2e4>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dcc:	d01a      	beq.n	8002e04 <UART_SetConfig+0x268>
 8002dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dd2:	d81b      	bhi.n	8002e0c <UART_SetConfig+0x270>
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dd8:	d00c      	beq.n	8002df4 <UART_SetConfig+0x258>
 8002dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dde:	d815      	bhi.n	8002e0c <UART_SetConfig+0x270>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <UART_SetConfig+0x250>
 8002de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de8:	d008      	beq.n	8002dfc <UART_SetConfig+0x260>
 8002dea:	e00f      	b.n	8002e0c <UART_SetConfig+0x270>
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df2:	e052      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002df4:	2302      	movs	r3, #2
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfa:	e04e      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e02:	e04a      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e04:	2308      	movs	r3, #8
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0a:	e046      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e0c:	2310      	movs	r3, #16
 8002e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	e042      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <UART_SetConfig+0x2dc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d13a      	bne.n	8002e94 <UART_SetConfig+0x2f8>
 8002e1e:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <UART_SetConfig+0x2e4>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e2c:	d01a      	beq.n	8002e64 <UART_SetConfig+0x2c8>
 8002e2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e32:	d81b      	bhi.n	8002e6c <UART_SetConfig+0x2d0>
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e38:	d00c      	beq.n	8002e54 <UART_SetConfig+0x2b8>
 8002e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e3e:	d815      	bhi.n	8002e6c <UART_SetConfig+0x2d0>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <UART_SetConfig+0x2b0>
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e48:	d008      	beq.n	8002e5c <UART_SetConfig+0x2c0>
 8002e4a:	e00f      	b.n	8002e6c <UART_SetConfig+0x2d0>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e52:	e022      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e54:	2302      	movs	r3, #2
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e5a:	e01e      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e62:	e01a      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e64:	2308      	movs	r3, #8
 8002e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e6a:	e016      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e72:	e012      	b.n	8002e9a <UART_SetConfig+0x2fe>
 8002e74:	cfff69f3 	.word	0xcfff69f3
 8002e78:	40008000 	.word	0x40008000
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40004400 	.word	0x40004400
 8002e88:	40004800 	.word	0x40004800
 8002e8c:	40004c00 	.word	0x40004c00
 8002e90:	40005000 	.word	0x40005000
 8002e94:	2310      	movs	r3, #16
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4aae      	ldr	r2, [pc, #696]	@ (8003158 <UART_SetConfig+0x5bc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	f040 8097 	bne.w	8002fd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d823      	bhi.n	8002ef6 <UART_SetConfig+0x35a>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <UART_SetConfig+0x318>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ed9 	.word	0x08002ed9
 8002eb8:	08002ef7 	.word	0x08002ef7
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ef7 	.word	0x08002ef7
 8002ec4:	08002ee7 	.word	0x08002ee7
 8002ec8:	08002ef7 	.word	0x08002ef7
 8002ecc:	08002ef7 	.word	0x08002ef7
 8002ed0:	08002ef7 	.word	0x08002ef7
 8002ed4:	08002eef 	.word	0x08002eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f7fe ff7e 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8002edc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ede:	e010      	b.n	8002f02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee0:	4b9e      	ldr	r3, [pc, #632]	@ (800315c <UART_SetConfig+0x5c0>)
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ee4:	e00d      	b.n	8002f02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee6:	f7fe fedf 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8002eea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002eec:	e009      	b.n	8002f02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ef4:	e005      	b.n	8002f02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8130 	beq.w	800316a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	4a94      	ldr	r2, [pc, #592]	@ (8003160 <UART_SetConfig+0x5c4>)
 8002f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f14:	461a      	mov	r2, r3
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d305      	bcc.n	8002f3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d903      	bls.n	8002f42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f40:	e113      	b.n	800316a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	2200      	movs	r2, #0
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	60fa      	str	r2, [r7, #12]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	4a84      	ldr	r2, [pc, #528]	@ (8003160 <UART_SetConfig+0x5c4>)
 8002f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2200      	movs	r2, #0
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f64:	f7fd f94a 	bl	80001fc <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	020b      	lsls	r3, r1, #8
 8002f7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f7e:	0202      	lsls	r2, r0, #8
 8002f80:	6979      	ldr	r1, [r7, #20]
 8002f82:	6849      	ldr	r1, [r1, #4]
 8002f84:	0849      	lsrs	r1, r1, #1
 8002f86:	2000      	movs	r0, #0
 8002f88:	460c      	mov	r4, r1
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	eb12 0804 	adds.w	r8, r2, r4
 8002f90:	eb43 0905 	adc.w	r9, r3, r5
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	469a      	mov	sl, r3
 8002f9c:	4693      	mov	fp, r2
 8002f9e:	4652      	mov	r2, sl
 8002fa0:	465b      	mov	r3, fp
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f7fd f929 	bl	80001fc <__aeabi_uldivmod>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4613      	mov	r3, r2
 8002fb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fb8:	d308      	bcc.n	8002fcc <UART_SetConfig+0x430>
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc0:	d204      	bcs.n	8002fcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	e0ce      	b.n	800316a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002fd2:	e0ca      	b.n	800316a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fdc:	d166      	bne.n	80030ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002fde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d827      	bhi.n	8003036 <UART_SetConfig+0x49a>
 8002fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <UART_SetConfig+0x450>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08003011 	.word	0x08003011
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	08003037 	.word	0x08003037
 8002ffc:	08003027 	.word	0x08003027
 8003000:	08003037 	.word	0x08003037
 8003004:	08003037 	.word	0x08003037
 8003008:	08003037 	.word	0x08003037
 800300c:	0800302f 	.word	0x0800302f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7fe fee2 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8003014:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003016:	e014      	b.n	8003042 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7fe fef4 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
 800301c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800301e:	e010      	b.n	8003042 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003020:	4b4e      	ldr	r3, [pc, #312]	@ (800315c <UART_SetConfig+0x5c0>)
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003024:	e00d      	b.n	8003042 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003026:	f7fe fe3f 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 800302a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800302c:	e009      	b.n	8003042 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800302e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003034:	e005      	b.n	8003042 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003040:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8090 	beq.w	800316a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	4a44      	ldr	r2, [pc, #272]	@ (8003160 <UART_SetConfig+0x5c4>)
 8003050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003054:	461a      	mov	r2, r3
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	fbb3 f3f2 	udiv	r3, r3, r2
 800305c:	005a      	lsls	r2, r3, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	441a      	add	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	d916      	bls.n	80030a4 <UART_SetConfig+0x508>
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d212      	bcs.n	80030a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f023 030f 	bic.w	r3, r3, #15
 8003086:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	b29b      	uxth	r3, r3
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	b29a      	uxth	r2, r3
 8003094:	8bfb      	ldrh	r3, [r7, #30]
 8003096:	4313      	orrs	r3, r2
 8003098:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	8bfa      	ldrh	r2, [r7, #30]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	e062      	b.n	800316a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030aa:	e05e      	b.n	800316a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d828      	bhi.n	8003106 <UART_SetConfig+0x56a>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <UART_SetConfig+0x520>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030e1 	.word	0x080030e1
 80030c0:	080030e9 	.word	0x080030e9
 80030c4:	080030f1 	.word	0x080030f1
 80030c8:	08003107 	.word	0x08003107
 80030cc:	080030f7 	.word	0x080030f7
 80030d0:	08003107 	.word	0x08003107
 80030d4:	08003107 	.word	0x08003107
 80030d8:	08003107 	.word	0x08003107
 80030dc:	080030ff 	.word	0x080030ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7fe fe7a 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 80030e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030e6:	e014      	b.n	8003112 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e8:	f7fe fe8c 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
 80030ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030ee:	e010      	b.n	8003112 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <UART_SetConfig+0x5c0>)
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030f4:	e00d      	b.n	8003112 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f6:	f7fe fdd7 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 80030fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030fc:	e009      	b.n	8003112 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003104:	e005      	b.n	8003112 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003110:	bf00      	nop
    }

    if (pclk != 0U)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d028      	beq.n	800316a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	4a10      	ldr	r2, [pc, #64]	@ (8003160 <UART_SetConfig+0x5c4>)
 800311e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003122:	461a      	mov	r2, r3
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	fbb3 f2f2 	udiv	r2, r3, r2
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	441a      	add	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	d910      	bls.n	8003164 <UART_SetConfig+0x5c8>
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003148:	d20c      	bcs.n	8003164 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	b29a      	uxth	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
 8003154:	e009      	b.n	800316a <UART_SetConfig+0x5ce>
 8003156:	bf00      	nop
 8003158:	40008000 	.word	0x40008000
 800315c:	00f42400 	.word	0x00f42400
 8003160:	08003890 	.word	0x08003890
      }
      else
      {
        ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2201      	movs	r2, #1
 800316e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2201      	movs	r2, #1
 8003176:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2200      	movs	r2, #0
 800317e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2200      	movs	r2, #0
 8003184:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003186:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800318a:	4618      	mov	r0, r3
 800318c:	3730      	adds	r7, #48	@ 0x30
 800318e:	46bd      	mov	sp, r7
 8003190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01a      	beq.n	80032aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003292:	d10a      	bne.n	80032aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  }
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b098      	sub	sp, #96	@ 0x60
 80032dc:	af02      	add	r7, sp, #8
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e8:	f7fd fc0e 	bl	8000b08 <HAL_GetTick>
 80032ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d12f      	bne.n	800335c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003304:	2200      	movs	r2, #0
 8003306:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f88e 	bl	800342c <UART_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d022      	beq.n	800335c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800332a:	653b      	str	r3, [r7, #80]	@ 0x50
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003334:	647b      	str	r3, [r7, #68]	@ 0x44
 8003336:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800333a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e6      	bne.n	8003316 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e063      	b.n	8003424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d149      	bne.n	80033fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003372:	2200      	movs	r2, #0
 8003374:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f857 	bl	800342c <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03c      	beq.n	80033fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	623b      	str	r3, [r7, #32]
   return(result);
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e6      	bne.n	8003384 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3308      	adds	r3, #8
 80033bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3308      	adds	r3, #8
 80033d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033d6:	61fa      	str	r2, [r7, #28]
 80033d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	69b9      	ldr	r1, [r7, #24]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	617b      	str	r3, [r7, #20]
   return(result);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e012      	b.n	8003424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3758      	adds	r7, #88	@ 0x58
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343c:	e04f      	b.n	80034de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d04b      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003446:	f7fd fb5f 	bl	8000b08 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <UART_WaitOnFlagUntilTimeout+0x30>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e04e      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d037      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb2>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b80      	cmp	r3, #128	@ 0x80
 8003472:	d034      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb2>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b40      	cmp	r3, #64	@ 0x40
 8003478:	d031      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b08      	cmp	r3, #8
 8003486:	d110      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2208      	movs	r2, #8
 800348e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f838 	bl	8003506 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2208      	movs	r2, #8
 800349a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e029      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b8:	d111      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f81e 	bl	8003506 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e00f      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d0a0      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003506:	b480      	push	{r7}
 8003508:	b095      	sub	sp, #84	@ 0x54
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800352c:	643b      	str	r3, [r7, #64]	@ 0x40
 800352e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003532:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e6      	bne.n	800350e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3308      	adds	r3, #8
 8003546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3308      	adds	r3, #8
 8003562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800356a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e3      	bne.n	8003540 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d118      	bne.n	80035b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	60bb      	str	r3, [r7, #8]
   return(result);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f023 0310 	bic.w	r3, r3, #16
 8003594:	647b      	str	r3, [r7, #68]	@ 0x44
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6979      	ldr	r1, [r7, #20]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	613b      	str	r3, [r7, #16]
   return(result);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e6      	bne.n	8003580 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80035c6:	bf00      	nop
 80035c8:	3754      	adds	r7, #84	@ 0x54
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e027      	b.n	8003638 <HAL_UARTEx_DisableFifoMode+0x66>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	@ 0x24
 80035f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003616:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003658:	2302      	movs	r3, #2
 800365a:	e02d      	b.n	80036b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	@ 0x24
 8003668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f84f 	bl	800373c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e02d      	b.n	8003734 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	@ 0x24
 80036e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f811 	bl	800373c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003748:	2b00      	cmp	r3, #0
 800374a:	d108      	bne.n	800375e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800375c:	e031      	b.n	80037c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800375e:	2308      	movs	r3, #8
 8003760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003762:	2308      	movs	r3, #8
 8003764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	0e5b      	lsrs	r3, r3, #25
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	0f5b      	lsrs	r3, r3, #29
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003786:	7bbb      	ldrb	r3, [r7, #14]
 8003788:	7b3a      	ldrb	r2, [r7, #12]
 800378a:	4911      	ldr	r1, [pc, #68]	@ (80037d0 <UARTEx_SetNbDataToProcess+0x94>)
 800378c:	5c8a      	ldrb	r2, [r1, r2]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003792:	7b3a      	ldrb	r2, [r7, #12]
 8003794:	490f      	ldr	r1, [pc, #60]	@ (80037d4 <UARTEx_SetNbDataToProcess+0x98>)
 8003796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003798:	fb93 f3f2 	sdiv	r3, r3, r2
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	7b7a      	ldrb	r2, [r7, #13]
 80037a8:	4909      	ldr	r1, [pc, #36]	@ (80037d0 <UARTEx_SetNbDataToProcess+0x94>)
 80037aa:	5c8a      	ldrb	r2, [r1, r2]
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80037b0:	7b7a      	ldrb	r2, [r7, #13]
 80037b2:	4908      	ldr	r1, [pc, #32]	@ (80037d4 <UARTEx_SetNbDataToProcess+0x98>)
 80037b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	080038a8 	.word	0x080038a8
 80037d4:	080038b0 	.word	0x080038b0

080037d8 <memset>:
 80037d8:	4402      	add	r2, r0
 80037da:	4603      	mov	r3, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	d100      	bne.n	80037e2 <memset+0xa>
 80037e0:	4770      	bx	lr
 80037e2:	f803 1b01 	strb.w	r1, [r3], #1
 80037e6:	e7f9      	b.n	80037dc <memset+0x4>

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003820 <__libc_init_array+0x38>)
 80037ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003824 <__libc_init_array+0x3c>)
 80037ee:	1b64      	subs	r4, r4, r5
 80037f0:	10a4      	asrs	r4, r4, #2
 80037f2:	2600      	movs	r6, #0
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003828 <__libc_init_array+0x40>)
 80037fa:	4c0c      	ldr	r4, [pc, #48]	@ (800382c <__libc_init_array+0x44>)
 80037fc:	f000 f818 	bl	8003830 <_init>
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	2600      	movs	r6, #0
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	f855 3b04 	ldr.w	r3, [r5], #4
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	080038c0 	.word	0x080038c0
 8003824:	080038c0 	.word	0x080038c0
 8003828:	080038c0 	.word	0x080038c0
 800382c:	080038c4 	.word	0x080038c4

08003830 <_init>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr

0800383c <_fini>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	bf00      	nop
 8003840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003842:	bc08      	pop	{r3}
 8003844:	469e      	mov	lr, r3
 8003846:	4770      	bx	lr
